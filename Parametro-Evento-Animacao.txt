Movendo o adesivo coletado do HUD para o MENU por DOTween

1° Criar um Carvas contendo um componente Image para alterar o Sprite, adicionando um script para manipular a animação de movimento.

2° Adicionar um GameObject Temporário exatamente na posição inicial onde desejo obter a coordenada do Target.

3° Definir a duração da animação de movimento, com um valor padrão de 2 segundos.

    [SerializeField] private float duration = 2.0f;


4° Declarar variável e armazenar a posição de destino para onde o objeto se moverá. 
  
    [SerializeField] private Transform target;
    [SerializeField] private GameObject animation;


5° Chamar o GameObject desativado ao ser inicializado o jogo. 

    public void Awake()
    {
        animation.gameObject.SetActive(false);
    }


5° testando o método de animação de movimento quando a tecla Espaço for pressionada.

    public void Update()
    {
        if (Input.GetKeyUp(KeyCode.Space))
        {
            PlayAnimation();
        }
    }


6° Método chamado para reproduzir a animação de movimento ao coletar o adesivo.

    public void PlayAnimation()
    {
        animation.gameObject.SetActive(true);

        animation.transform.GetComponent<RectTransform>().DOAnchorPos(endValue: new Vector2(x: 7f, y: 27f), duration: 1f).SetDelay(0.5f).SetEase(Ease.InBack);
        animation.transform.DOMove(target.position, duration).SetEase(Ease.OutBack).OnComplete(() =>
        {
            animation.gameObject.SetActive(false);

            animation.GetComponent<RectTransform>().anchoredPosition = new Vector2 (0,0);
        });

    }


// A função DOMove() da biblioteca DG.Tweening é usada para criar essa animação.
// SetEase(Ease.OutBack): Define a curva de interpolação para a animação, tornando o movimento mais natural.
// OnComplete(() => { transform.gameObject.SetActive(false); }): Esta parte do código é chamada quando a animação é concluída. Ela desativa o objeto atual, tornando-o invisível.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



1° Validado que o metodo PlayAnimation está funcionando, testando a chamada atraves do Input Space
2° Alterar a chamada pelo Input por uma assinatura no metodo PlayAnimation 

// A assinatura é como a identidade de um método, dizendo quem ele é e o que ele faz. 

public void PlayStickerAnimation(StickerSO stickerData)
{
	//Codigo da animação
}

// Temos um método chamado PlayStickerAnimation que recebe um parametro (stickerData) do tipo (StickerSO) e retorna uma animação. 
// Isso permite que o método saiba qual sprite usar para o adesivo, tornando-o mais flexível e reutilizável.
// Isso significa que sempre que o método for chamado, é necessário fornecer um objeto StickerSO que contém as informações específicas do adesivo a ser animado.

[SerializeField] private GameObject sticker;

public void PlayStickerAnimation(StickerSO stickerData)
    {
        var stickerImg = sticker.GetComponent<Image>();

        stickerImg.sprite = stickerData.stickerAsset;

        sticker.gameObject.SetActive(true);

        sticker.transform.DOMove(target.position, duration).SetEase(Ease.OutBack).OnComplete(() =>
        {
            sticker.GetComponent<RectTransform>().anchoredPosition = new Vector2 (0,0);

            sticker.gameObject.SetActive(false);

        });


3° Adicionar script GameEventListener no GameOject (Sticker-Animation) para ouvir eventos específicos do jogo (GameEvent) e, quando esses eventos ocorrem, desencadeia uma série de ações associadas a esses eventos.

//OnUnlockSticker: É um evento que leva um StickerSO como parâmetro
//O propósito desse evento é permitir que outros scripts ou partes do código do jogo se inscrevam (ou "escutem") esse evento e executem ações específicas quando um adesivo for desbloqueado.




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Script que controla a animação de um adesivo ("sticker") em Unity usando a biblioteca DOTween. A animação move o adesivo para uma posição alvo ("target") e aplica efeitos de easing para dar à animação uma sensação de suavidade.

// Importando as bibliotecas necessárias
using DG.Tweening;  // Biblioteca para animações tweening
using UnityEngine;    // Biblioteca principal do Unity
using UnityEngine.UI; // Biblioteca para trabalhar com UI no Unity

// Definindo a classe StickerAnimation que herda de MonoBehaviour
public class StickerAnimation : MonoBehaviour
{
    // Variável para armazenar a duração da animação (pode ser ajustada no Inspector no Unity)
    [SerializeField] private float duration = 2.0f;

    // Referência ao objeto alvo da animação (pode ser ajustado no Inspector no Unity)
    [SerializeField] private Transform target;

    // Referência ao objeto de imagem que representa o adesivo
    [SerializeField] private GameObject sticker;

    // Método chamado quando o objeto é inicializado
    public void Awake()
    {
        // Desativa o objeto do adesivo quando o script é iniciado
        sticker.gameObject.SetActive(false);
    }

    // Método para iniciar a animação do adesivo
    public void PlayStickerAnimation(StickerSO stickerData)
    {
        // Obtém a referência à componente de imagem do adesivo
        var stickerImg = sticker.GetComponent<Image>();

        // Verifica se a referência não é nula
        if(stickerImg != null)
        {
            // Define a imagem do adesivo com base nos dados fornecidos
            stickerImg.sprite = stickerData.stickerAsset;
        }

        // Ativa o objeto do adesivo para torná-lo visível
        sticker.gameObject.SetActive(true);

        // Inicia a animação de movimento do adesivo em direção ao alvo
        sticker.transform.DOMove(target.position, duration).SetEase(Ease.OutBack).OnComplete(() =>
        {
            // Ao completar a animação:
            
            // Limpa a imagem do adesivo
            stickerImg.sprite = null;

            // Reseta a posição do adesivo para (0,0) no RectTransform
            sticker.GetComponent<RectTransform>().anchoredPosition = new Vector2(0, 0);

            // Desativa o objeto do adesivo para ocultá-lo
            sticker.gameObject.SetActive(false);
        });
    }
}



---------------------------------------------------------------------------------------------------------------------------------

using System.Collections;
using TMPro;
using UnityEngine;

public class CompleteNotification : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI notificationText;
    [SerializeField] private GameObject imagem;
    [SerializeField] private float delayTime = 3;

    private void Awake()
    {
        imagem.SetActive(false);
        notificationText.gameObject.SetActive(false);
    }

    public void ShowComplete(AlbumSO album)
    {
        notificationText.text = "" + album.AlbumName;
        imagem.SetActive(true);
        notificationText.gameObject.SetActive(true);
        StartCoroutine(DisableAfterTime());
    }

    private IEnumerator DisableAfterTime()
    {
        yield return new WaitForSeconds(delayTime);
        sticker.SetActive(false);
        notificationText.gameObject.SetActive(false);
    }
}

