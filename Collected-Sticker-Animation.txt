Movendo o adesivo coletado do HUD para o MENU por DOTween

1° Criar um Carvas contendo um componente Image para alterar o Sprite, adicionando um script para manipular a animação de movimento.

2° Adicionar um GameObject Temporário exatamente na posição inicial onde desejo obter a coordenada do Target.

3° Definir a duração da animação de movimento, com um valor padrão de 2 segundos.

    [SerializeField] private float duration = 2.0f;


4° Declarar variável e armazenar a posição de destino para onde o objeto se moverá. 
  
    [SerializeField] private Transform target;
    [SerializeField] private GameObject sticker;


5° Chamar o GameObject desativado ao ser inicializado o jogo. 

    public void Awake()
    {
        sticker.gameObject.SetActive(false);
    }

5° testando o método de animação de movimento quando a tecla Espaço for pressionada.

    public void Update()
    {
        if (Input.GetKeyUp(KeyCode.Space))
        {
            PlayStickerAnimation();
        }
    }

6° Método chamado para reproduzir a animação de movimento ao coletar o adesivo.

    public void PlayStickerAnimation()
    {
        sticker.gameObject.SetActive(true);

        sticker.transform.GetComponent<RectTransform>().DOAnchorPos(endValue: new Vector2(x: 7f, y: 27f), duration: 1f).SetDelay(0.5f).SetEase(Ease.InBack);
        sticker.transform.DOMove(target.position, duration).SetEase(Ease.OutBack).OnComplete(() =>
        {
            sticker.gameObject.SetActive(false);

            sticker.GetComponent<RectTransform>().anchoredPosition = new Vector2 (0,0);
        });

    }

A função DOMove() da biblioteca DG.Tweening é usada para criar essa animação.

SetEase(Ease.OutBack): Define a curva de interpolação para a animação, tornando o movimento mais natural.

OnComplete(() => { transform.gameObject.SetActive(false); }): Esta parte do código é chamada quando a animação é concluída. Ela desativa o objeto atual, tornando-o invisível.



Vou explicar o código do Unity C# linha por linha:

```csharp
using DG.Tweening;
using TMPro;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class StickerAnimation : MonoBehaviour
{
    // Define uma variável pública para a duração da animação.
    public float duration = 2.0f;

    // Define variáveis serializadas que podem ser ajustadas no Editor do Unity.
    [SerializeField] private Transform target;       // Transform da posição de destino da animação.
    [SerializeField] private GameObject sticker;     // Referência ao objeto que será animado.

    // Este método é chamado quando o objeto é inicializado.
    public void Awake()
    {
        // Desativa o objeto "sticker" quando o jogo começa.
        sticker.gameObject.SetActive(false);
    }

    // Este método é chamado a cada quadro de atualização do jogo.
    public void Update()
    {
        // Verifica se a tecla Espaço foi pressionada.
        if (Input.GetKeyUp(KeyCode.Space))
        {
            // Chama o método para reproduzir a animação do adesivo.
            PlayStickerAnimation();
        }
    }

    // Este método é chamado para reproduzir a animação do adesivo.
    public void PlayStickerAnimation()
    {
        // Ativa o objeto "sticker" para que ele seja visível.
        sticker.gameObject.SetActive(true);

        // Anima a posição do objeto "sticker" usando o DOTween.
        sticker.transform.GetComponent<RectTransform>().DOAnchorPos(new Vector2(7f, 27f), 1f) // Define a posição final.
            .SetDelay(0.5f)           // Adia o início da animação em 0.5 segundos.
            .SetEase(Ease.InBack);    // Aplica uma interpolação de entrada para a animação.

        // Anima a posição do objeto "sticker" para a posição do "target" usando o DOTween.
        sticker.transform.DOMove(target.position, duration) // Define a posição final e a duração da animação.
            .SetEase(Ease.OutBack)   // Aplica uma interpolação de saída para a animação.
            .OnComplete(() =>        // Define um callback que é chamado quando a animação está completa.
            {
                // Desativa o objeto "sticker" novamente.
                sticker.gameObject.SetActive(false);

                // Define a posição da âncora do RectTransform do "sticker" de volta para (0, 0).
                sticker.GetComponent<RectTransform>().anchoredPosition = new Vector2(0, 0);
            });
    }
}
```

Espero que isso ajude a entender o código! Ele parece ser um script que controla a animação de um adesivo ("sticker") em Unity usando a biblioteca DOTween. A animação move o adesivo para uma posição alvo ("target") e aplica efeitos de easing para dar à animação uma sensação de suavidade.

// Importando as bibliotecas necessárias
using DG.Tweening;  // Biblioteca para animações tweening
using UnityEngine;    // Biblioteca principal do Unity
using UnityEngine.UI; // Biblioteca para trabalhar com UI no Unity

// Definindo a classe StickerAnimation que herda de MonoBehaviour
public class StickerAnimation : MonoBehaviour
{
    // Variável para armazenar a duração da animação (pode ser ajustada no Inspector no Unity)
    [SerializeField] private float duration = 2.0f;

    // Referência ao objeto alvo da animação (pode ser ajustado no Inspector no Unity)
    [SerializeField] private Transform target;

    // Referência ao objeto de imagem que representa o adesivo
    [SerializeField] private GameObject sticker;

    // Método chamado quando o objeto é inicializado
    public void Awake()
    {
        // Desativa o objeto do adesivo quando o script é iniciado
        sticker.gameObject.SetActive(false);
    }

    // Método para iniciar a animação do adesivo
    public void PlayStickerAnimation(StickerSO stickerData)
    {
        // Obtém a referência à componente de imagem do adesivo
        var stickerImg = sticker.GetComponent<Image>();

        // Verifica se a referência não é nula
        if(stickerImg != null)
        {
            // Define a imagem do adesivo com base nos dados fornecidos
            stickerImg.sprite = stickerData.stickerAsset;
        }

        // Ativa o objeto do adesivo para torná-lo visível
        sticker.gameObject.SetActive(true);

        // Inicia a animação de movimento do adesivo em direção ao alvo
        sticker.transform.DOMove(target.position, duration).SetEase(Ease.OutBack).OnComplete(() =>
        {
            // Ao completar a animação:
            
            // Limpa a imagem do adesivo
            stickerImg.sprite = null;

            // Reseta a posição do adesivo para (0,0) no RectTransform
            sticker.GetComponent<RectTransform>().anchoredPosition = new Vector2(0, 0);

            // Desativa o objeto do adesivo para ocultá-lo
            sticker.gameObject.SetActive(false);
        });
    }
}
